{
  "selectedMissionId": null,
  "list": [
    {
      "id": 1,
      "title": "Effectiveness lies in simplicity",
      "description": "Break the security of the e-commerce system and obtain the complete data of one of the buyers, along with the last shipment number and tracking code, by executing an SQL Injection attack.",
      "takeaway": "This challenge teaches you about SQL Injection, a common vulnerability in web applications. By finding a vulnerability in an e-commerce website's search bar, you can execute malicious SQL code and gain access to the database, potentially obtaining sensitive data. This challenge implements two OWASP TOP 10 (2021) vulnerabilities: Broken Access Control (A01) and Injection (A03). By completing this challenge, you will gain an understanding of these vulnerabilities and learn about implementing proper security measures to prevent such attacks in the future.",
      "takeaway_urls": [
        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "https://owasp.org/Top10/A03_2021-Injection/"
      ],
      "flags": [
        {
          "flagName": "SQL/1",
          "question": "Enter the HTML ID of the vulnerable text field",
          "hint": "Look for the search bar in the 'My orders' section of the user panel and inspect the HTML.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "SQL/2",
          "question": "Enter the name of the table where user data is stored",
          "hint": "Start by creating a simple SQL code that will retrieve information from the database. Once you have access to the database, retrieve a list of tables in the database.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "SQL/3",
          "question": "Enter the last name of the user with ID = 420",
          "hint": "Find the table that stores users, and then retrieve information about a specific user with a certain ID.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "SQL/4",
          "question": "Enter the ID of the user's (ID = 420) last shipment",
          "hint": "Find the table that stores all orders, and then retrieve only those that were placed by a specific user with a certain ID, listing them in descending order by date",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "SQL/5",
          "question": "Enter the tracking number of the shipment whose ID you provided in the previous task",
          "hint": "Retrieve all data for an order with a specific ID, and then search for the tracking number within it.",
          "value": "xxx",
          "done": false
        }
      ]
    },
    {
      "id": 2,
      "title": "Take control of payments",
      "description": "Test your skills and break into the security of an e-commerce platform. Gain control over payments by identifying vulnerabilities in the admin panel and analyzing the HTML code. Will you be able to change the order status?",
      "takeaway": "This challenge will help you learn about two common web application vulnerabilities: Broken Access Control and Injection. Through this challenge, you will understand the potential consequences of exploiting these vulnerabilities and how to implement proper security measures to prevent such attacks in the future. You will also learn about the importance of deactivating default administrator accounts and implementing proper authorization and access control mechanisms. This challenge will give you a hands-on experience in identifying and exploiting vulnerabilities, and also demonstrate the importance of thorough testing and securing web applications before deploying them to production.",
      "takeaway_urls": [
        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "https://owasp.org/Top10/A04_2021-Insecure_Design/"
      ],
      "flags": [
        {
          "flagName": "ADMIN/1",
          "question": "Enter the name of the software on which the e-commerce platform is built.",
          "hint": "Analyze the code yourself or use ready-made browser plugins that will provide you with information about the technologies used.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "ADMIN/2",
          "question": "Enter the password for the default administrator account in this software.",
          "hint": "Try to find the login path to the CMS panel and default data for the administrator account on the internet or in the documentation.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "ADMIN/3",
          "question": "Provide the HTML ID of the button responsible for changing the payment status in an order.",
          "hint": "Find the place in the CMS where the administrator can edit the orders of buyers.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "ADMIN/4",
          "question": "Change the payment status to 'Paid', and then enter the flag that was displayed in the browser console.",
          "hint": "Try to modify the HTML / JavaScript code in such a way as to bypass the security measures for changing the payment status.",
          "value": "xxx",
          "done": false
        }
      ]
    },
    {
      "id": 3,
      "title": "Master of puppets",
      "description": "Exploit a vulnerability in the system that will allow you to take down all users at once. Act quickly and precisely, combine different technologies, and even write your own code.",
      "takeaway": "This challenge aims to help you learn about XSS attacks, a common vulnerability in web applications. By finding a vulnerability in an e-commerce website, you will be able to execute malicious JavaScript code and gain access to sensitive data. This challenge implements the OWASP TOP 10 (2021) vulnerability: Injection (A03). Injection attacks allow attackers to execute malicious code within an IT system, which can lead to unauthorized access to data. By completing this challenge, you will gain an understanding of these vulnerabilities and the potential consequences of exploiting them. You will also learn about how to implement proper security measures to prevent such attacks in the future.",
      "takeaway_urls": [
        "https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "https://owasp.org/Top10/A03_2021-Injection/",
        "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"
      ],
      "flags": [
        {
          "flagName": "XSS/1",
          "question": "Find injection-vulnerable input and enter flag from its HTML code",
          "hint": "Think about the place where everybody can receive your XSS code. Womewhere where you can share your thoughts.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "XSS/2",
          "question": "Using XSS, display the name of this flag in the console: 'XSS/2'. If the process is successful, you will receive the flag.",
          "hint": "Create simple JS code which prints given text in the console, then try it out in the vulnerable area",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "XSS/3",
          "question": "Using XSS, send any messessage to the server ... and listen on the port :8000. If the process is successful, you will receive your messesage and the flag.",
          "hint": "Create JS code which sends any messesage to the given server IP. You can use 'XMLHttpRequest'. Using e.g. 'netcat -l <PORT>' or 'socat TCP-LISTEN:<PORT>' listen for the response from the server",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "XSS/4",
          "question": "Alter your XSS code to send user' session token to the server ... . If the process is successful, you will receive other user' token and the flag.",
          "hint": "Replace your previous random messessage with the user' session token. You can find it in the browser cookies.",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "XSS/5",
          "question": "Take controll over user' account. If the process is successful, you will receive the flag.",
          "hint": "Replace yours session token with stolen one. You can simply do it using 'Inspect' functionality in your browser",
          "value": "xxx",
          "done": false
        },
        {
          "flagName": "XSS/6",
          "question": "Make an order using stolen account. If the process is successful, you will receive the flag.",
          "hint": "Being logged into stolen account, add few items to the basket and make an order.",
          "value": "xxx",
          "done": false
        }
      ]
    },
    {
      "id": 4,
      "title": "Explore the surrounding",
      "description": "Time for something special. Since you're good at finding vulnerabilities, maybe you could try to hack this application as well?",
      "takeaway": "In this challenge, you'll have to attack a user panel application to take control of the application and mark certain flags as complete. This challenge is a great way to understand how frontend applications work, how they manage data, and to learn about the risks of this project structure. You'll also learn about different vulnerabilities like Broken Access Control, Cryptographic Failures, and Insecure Design and how to prevent them from happening. By completing this challenge, you'll gain a better understanding of IT systems, and you'll learn to consider more edge cases, analyze data more carefully, and design better security mechanisms.",
      "takeaway_urls": [
        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"
      ],
      "flags": [
        {
          "flagName": "EXPLORE/1",
          "question": "What is the name of file where we store all the data for missions?",
          "hint": "It's just frontend app, you have all the permisions to view the code",
          "value": "be09420b188f86a0287949e8355b3fdc",
          "done": false
        },
        {
          "flagName": "EXPLORE/2",
          "question": "There is no good or bad answers. Pick your own way to capture the last flag",
          "hint": "You pick the rules. Dig in code, alter it or take some fun with encryption.",
          "value": "9d5792 | YOU GOT US! | 3db755",
          "done": false
        }
      ]
    }
  ]
}
